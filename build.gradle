/**
 * 构建的配置
 */
buildscript {
    apply plugin: 'groovy'

	ext {
		springBootVersion = '1.4.2.RELEASE'
	}
	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

        // coverage
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
        classpath "net.saliman:gradle-cobertura-plugin:2.3.2"
	}
}

/**
 * All projects configuration
 */
configure(allprojects) { project ->
	group = "org.asion"
	version = qualifyVersionIfNecessary(version)

    apply plugin: 'java'
	apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'net.saliman.cobertura'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	ext {
		springBootVersion = '1.4.4.RELEASE'
		springVersion = '4.3.6.RELEASE'
		springCloudVersion = 'Camden.SR5'
		springBootAdminVersion = '1.4.5'
		platformBomVersion = 'Athens-SR3'
		unitilsBom = '3.4.2'
        thymeleafVersion = '3.0.1.RELEASE'
        thymeleafLayoutDialectVersion = '2.0.1'
        thymeleafJava8timeVersion = '3.0.0.RELEASE'
	}

	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}

    // noinspection GroovyAssignabilityCheck
	jar {
		manifest {
			attributes 'Created-By': "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
					'Implementation-Title': project.name,
					'Implementation-Version': project.version
		}
		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
            into "META-INF"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}
	}

	idea {
		module {
			//if you hate browsing Javadoc
			downloadJavadoc = false
			//and love reading sources :)
			downloadSources = true
		}
	}
}

/**
 * spring-boot-base-to-advanced-projects's sub projects configuration
 */
subprojects {
	apply plugin: "io.spring.dependency-management"

	dependencyManagement {
		imports {
			mavenBom "org.springframework:spring-framework-bom:${springVersion}"
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
			mavenBom "io.spring.platform:platform-bom:${platformBomVersion}"
		}
	}

//    cobertura {
//        coverageIgnoreTrivial = true
//    }

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
		// don't include or exclude anything explicitly by default. See SPR-12085.
	}

	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

/**
 * rootProject configuration
 */
configure(rootProject) {
	description = "Spring Boot Base to Advanced"
}

def subCoberturaFiles = subprojects.collect { new File(it.projectDir, "/build/cobertura/cobertura.ser") }

cobertura {
    coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = subCoberturaFiles
}

test.dependsOn(subprojects.test)

task wrapper(type: Wrapper) {
	gradleVersion = '3.1'
}

/*
 * Support publication of artifacts versioned by topic branch.
 * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
 * If <TOPIC> starts with 'SPR-', change version
 *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
 *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
 */
def qualifyVersionIfNecessary(version) {
	if (rootProject.hasProperty("BRANCH_NAME")) {
		def qualifier = rootProject.getProperty("BRANCH_NAME")
		if (qualifier.startsWith("SPR-")) {
			return version.replace('BUILD', qualifier)
		}
	}
	return version
}
